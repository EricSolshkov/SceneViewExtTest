// Test project fo SceneViewExtension / RDG Shader Basic setup
// Copyright 2022 Ossi Luoto
// 
// Very basic Compute Shader utilizing the Engine basics

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"
#include "/Engine/Generated/GeneratedUniformBuffers.ush"

// Default border size for group.
#define DEFAULT_GROUP_BORDER_SIZE 8
#define GROUP_BORDER_SIZE (DEFAULT_GROUP_BORDER_SIZE)


// HeatResource Struct Definition
struct FHeatSourceMeta
{
	float3 Center;
	float Radius;
	float3 Color;
};

// Parameters
uint4 ViewportRect;
StructuredBuffer<FHeatSourceMeta> HeatResources;
uint HeatResourceCount;
float LowCut;
float TemperatureRange;
float HalfValueDepth;

Texture3D Noise;
SamplerState NoiseSampler;

Texture2D ColorStripe;
SamplerState ColorStripeSampler;

// We should be able to use View.BufferSizeAndInvSize here, but currently it is not possible/easy to get consistent results due to different scaling applications
float2 SceneColorBufferInvSize;
// Output
RWTexture2D<float4> Output;

// Reference method parameter
//float UVScale;

// Compute Shader code
[numthreads(GROUP_BORDER_SIZE, GROUP_BORDER_SIZE, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// Check that we are in scope
	if (any(DispatchThreadId >= ViewportRect.zw))
	{
		return;
	}
	ViewState ResolvedView = ResolveView();

	// If we have the Original Scene Color still here, we need to use the original offset as well
	// Due to UniformBuffer refering to the Viewport before TAA (this might change in the future?) we need to apply scale to the UV
	float2 sampleUV = (float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * SceneColorBufferInvSize;

	// Another method here for referene - scaling introduced in 5.0> made it super difficult to get consistent results
	// float2 sampleUV = (float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * View.BufferSizeAndInvSize.zw * UVScale;

	// Load GBuffer
	FGBufferData GBuffer = DecodeGBufferData(
		SceneTexturesStruct.GBufferATexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferBTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferCTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferDTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferETexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferFTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferVelocityTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.CustomDepthTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.CustomStencilTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.SceneDepthTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		true, true
	);

	// Calc world position
	float4 SvPosition = float4(DispatchThreadId, GBuffer.Depth, 1.0f);
	float4 AbsoluteWorldPosition = float4(SvPositionToWorld(SvPosition), 1.0f);

	// Now the rest of the inputs( RGB to Grey Scale)
	float3 HeatedColor = float3(0, 0, 0);
	for (int i = 0; i < HeatResourceCount; ++i)
	{
		float3 Vec2Hit = AbsoluteWorldPosition.xyz - HeatResources[i].Center;
		float3 Local1 = dot(Vec2Hit, Vec2Hit);
		float Dist2Hit = sqrt(Local1).r;
		float Dist2HitScaled = (Dist2Hit / HeatResources[i].Radius);
		float Local4 = (1.00000000 - Dist2HitScaled);
		float RelativeRadiusClamp = (Local4 * 1.00000000);

		float3 ScaledWorldPosition = Vec2Hit.xyz / 64.0f;
		float NoiseSample = Texture3DSample(Noise, NoiseSampler, ScaledWorldPosition).r;
		float InvNoise = 1.0f - NoiseSample;
		float ScaledInvNoise = InvNoise * 0.5f;

		float3 NoisedSphereMask = RelativeRadiusClamp - ScaledInvNoise;
		NoisedSphereMask = min(max(NoisedSphereMask, 0.00000000), 1.00000000);
		//RadianceBonus += 256 * min(max(Local5,0.00000000),1.00000000);
		HeatedColor += NoisedSphereMask;
	}
	
	
	float3 HeatedBaseColor = HeatedColor + GBuffer.BaseColor;
	float HeatedBaseRG = (HeatedBaseColor.r + HeatedBaseColor.g);
	float HeatedBaseSum = (HeatedBaseRG + HeatedBaseColor.b);
	float HeatedBase01 = (HeatedBaseSum / 3.00000000);

	// Map to color stripe
	float HeatFromLowCut = HeatedBase01 - LowCut;
	float ScaledHeat = HeatFromLowCut / TemperatureRange;
	float ClampedHeat = min(max(ScaledHeat, 0.00000000), 1.00000000);
	float4 MappedHeatedColor = Texture2DSample(ColorStripe, ColorStripeSampler, float2(ClampedHeat, 0.50000000));

	// Distance/Depth Decay
	float InvDvcDepth = 1 / GBuffer.Depth;
	float TrueDepth = InvDvcDepth - 1.00000000;
	float ScaledTrueDepth = TrueDepth / HalfValueDepth;
	ScaledTrueDepth = ScaledTrueDepth + 1.00000000;
	float DepthDecay = 1 / ScaledTrueDepth;
	DepthDecay = sqrt(DepthDecay);

	// Fake AO Decay
	float4 CameraNormal = mul(View.WorldToClip , float4(GBuffer.WorldNormal, 1));
	float CameraNormalSq = dot(CameraNormal.xyz, CameraNormal.xyz);
	float CameraNormalLength = sqrt(CameraNormalSq);
	float3 IdentCamNormal = (CameraNormal / CameraNormalLength);
	float TowardOutsideScreen = (IdentCamNormal.x * -1.00000000);
	float Temp0 = (TowardOutsideScreen + 4.00000000);
	float AODecay = (Temp0 / 5.00000000);
	float FinalDecay = (DepthDecay * AODecay);

	// Final decay.
	float4 DecayedHeat = float4(MappedHeatedColor.rgb * FinalDecay, 1);
	Output[View.ViewRectMin.xy + DispatchThreadId] = DecayedHeat;
}
