// Test project fo SceneViewExtension / RDG Shader Basic setup
// Copyright 2022 Ossi Luoto
// 
// Very basic Compute Shader utilizing the Engine basics

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"
#include "/Engine/Generated/GeneratedUniformBuffers.ush"

// Default border size for group.
#define DEFAULT_GROUP_BORDER_SIZE 8
#define GROUP_BORDER_SIZE (DEFAULT_GROUP_BORDER_SIZE)


// HeatResource Struct Definition
struct FHeatResource
{
	float3 Center;
	float Radius;
	float3 Color;
};

// Parameters
uint4 ViewportRect;
RWStructuredBuffer<FHeatResource> HeatResources;
uint HeatResourceCount;

// We should be able to use View.BufferSizeAndInvSize here, but currently it is not possible/easy to get consistent results due to different scaling applications
float2 SceneColorBufferInvSize;
// Output
RWTexture2D<float4> Output;

// Reference method parameter
//float UVScale;

// Compute Shader code
[numthreads(GROUP_BORDER_SIZE, GROUP_BORDER_SIZE, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// Check that we are in scope
    if (any(DispatchThreadId >= ViewportRect.zw))
    {
        return;
    }

    // If we have the Original Scene Color still here, we need to use the original offset as well
    // Due to UniformBuffer refering to the Viewport before TAA (this might change in the future?) we need to apply scale to the UV
    float2 sampleUV = (float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * SceneColorBufferInvSize;

    // Another method here for referene - scaling introduced in 5.0> made it super difficult to get consistent results
	// float2 sampleUV = (float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * View.BufferSizeAndInvSize.zw * UVScale;

	// Load GBuffer
	FGBufferData GBuffer = DecodeGBufferData(
		SceneTexturesStruct.GBufferATexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferBTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferCTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferDTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferETexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferFTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferVelocityTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.CustomDepthTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.CustomStencilTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.SceneDepthTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		true, true
		);

	// Calc world position
	float4 SvPosition = float4(DispatchThreadId, GBuffer.Depth, 1.0f);
	float4 AbsoluteWorldPosition = float4(SvPositionToWorld(SvPosition), 1.0f);

	float3 RadianceBonus = float3(0,0,0);
	
	for(int i = 0; i < HeatResourceCount; i++)
	{
		float3 Vec2Hit = AbsoluteWorldPosition.xyz - HeatResources[i].Center;
		float3 Local1 = dot(Vec2Hit, Vec2Hit);
		float3 Dist2Hit = sqrt(Local1);
		float3 Dist2HitScaled = (Dist2Hit / HeatResources[i].Radius);
		float3 Local4 = (1.00000000 - Dist2HitScaled);
		float3 Local5 = (Local4 * 1.00000000);
		//RadianceBonus += 256 * min(max(Local5,0.00000000),1.00000000);
		RadianceBonus += HeatResources[i].Color * min(max(Local5,0.00000000),1.00000000);
	}
    // Write output
    //Output[View.ViewRectMin.xy + DispatchThreadId] = float4(RadianceBonus, RadianceBonus, RadianceBonus, 1);
	float3 outColor = min(max(GBuffer.BaseColor.rgb + RadianceBonus,0.00000000),1.00000000);
    Output[View.ViewRectMin.xy + DispatchThreadId] = float4(outColor, 1);
    

}


