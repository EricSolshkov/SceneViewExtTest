// Test project fo SceneViewExtension / RDG Shader Basic setup
// Copyright 2022 Ossi Luoto
// 
// Very basic Compute Shader utilizing the Engine basics

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"
#include "/Engine/Generated/GeneratedUniformBuffers.ush"

// Default border size for group.
#define DEFAULT_GROUP_BORDER_SIZE 8
#define GROUP_BORDER_SIZE (DEFAULT_GROUP_BORDER_SIZE)

// Parameters
float4x4 ViewToWorld;
float tanhalf;
float4 InvDeviceZToWorldZTransform;
Texture2D OriginalSceneColor;
uint4 ViewportRect;

// We should be able to use View.BufferSizeAndInvSize here, but currently it is not possible/easy to get consistent results due to different scaling applications
float2 SceneColorBufferInvSize;
// Output
RWTexture2D<float4> Output;

// Reference method parameter
//float UVScale;

// Utilities
float ConvertFromDvcZ(float DeviceZ)
{
	// Supports ortho and perspective, see CreateInvDeviceZToWorldZTransform()
	return DeviceZ * InvDeviceZToWorldZTransform[0] + InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * InvDeviceZToWorldZTransform[2] - InvDeviceZToWorldZTransform[3]);
}

// Compute Shader code
[numthreads(GROUP_BORDER_SIZE, GROUP_BORDER_SIZE, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// Check that we are in scope
    if (any(DispatchThreadId >= ViewportRect.zw))
    {
        return;
    }

    // If we have the Original Scene Color still here, we need to use the original offset as well
    // Due to UniformBuffer refering to the Viewport before TAA (this might change in the future?) we need to apply scale to the UV
    float2 sampleUV = (float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * SceneColorBufferInvSize;

    // Another method here for referene - scaling introduced in 5.0> made it super difficult to get consistent results
	// float2 sampleUV = (float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * View.BufferSizeAndInvSize.zw * UVScale;

	// Load GBuffer
	FGBufferData GBuffer = DecodeGBufferData(
		SceneTexturesStruct.GBufferATexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferBTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferCTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferDTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferETexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferFTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.GBufferVelocityTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.CustomDepthTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.CustomStencilTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		SceneTexturesStruct.SceneDepthTexture.SampleLevel(GlobalPointClampedSampler, sampleUV, 0),
		true, true
		);

    // sample OriginalColor
    float4 OriginalColor = OriginalSceneColor.SampleLevel(GlobalPointClampedSampler, sampleUV, 0);

	// calc world position
	float4 HomoWorldPositionUEOrder = float4(SvPositionToWorld(float4(DispatchThreadId, GBuffer.Depth, 1.0f)), 1.0f);
	
	float4 HomoWorldPosition = float4(HomoWorldPositionUEOrder.y, HomoWorldPositionUEOrder.z, HomoWorldPositionUEOrder.x, HomoWorldPositionUEOrder.w);

    // Write output
    Output[View.ViewRectMin.xy + DispatchThreadId] = HomoWorldPosition / (HomoWorldPosition.w);

}


